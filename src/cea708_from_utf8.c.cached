/* Generated by re2c 1.3 on Sun Oct  3 13:33:00 2021 */
/*
 * cea708_from_utf8
 *
 * Copyright 2021 Michael Farrell <micolous+git@gmail.com>
 * 
 * SPDX-License-Identifier: MIT
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#include "utf8.h"
#include <stdint.h>

uint16_t _cea708_from_utf8(const utf8_char_t* s) {
    const unsigned char* YYMARKER = 0;
    const unsigned char* YYCURSOR = (const unsigned char*) s;

    if (0==s) {
        return 0x0000;
    }

    
{
    unsigned char yych;
    yych = *YYCURSOR;
    if (yych <= '~') {
        if (yych <= 0x00) goto yy2;
        if (yych <= 0x1F) goto yy4;
        goto yy6;
    } else {
        if (yych == 0xC3) goto yy8;
        goto yy4;
    }
yy2:
    ++YYCURSOR;
    {
        // NULL
        return 0x0000;
    }
yy4:
    ++YYCURSOR;
yy5:
    {
        // DEFAULT_RULE
        return 0x0000;
    }
yy6:
    ++YYCURSOR;
    { 
        return s[0] & 0xFF;
    }
yy8:
    yych = *(YYMARKER = ++YYCURSOR);
    if (yych <= 0x84) {
        if (yych <= 0x81) goto yy5;
        if (yych <= 0x82) goto yy9;
        if (yych <= 0x83) goto yy11;
        goto yy5;
    } else {
        if (yych <= 0x85) goto yy12;
        if (yych == 0xA2) goto yy13;
        goto yy5;
    }
yy9:
    yych = *++YYCURSOR;
    if (yych == 0xC2) goto yy14;
yy10:
    YYCURSOR = YYMARKER;
    goto yy5;
yy11:
    yych = *++YYCURSOR;
    if (yych == 0xC2) goto yy15;
    goto yy10;
yy12:
    yych = *++YYCURSOR;
    if (yych == 0xC2) goto yy16;
    goto yy10;
yy13:
    yych = *++YYCURSOR;
    if (yych == 0xC2) goto yy17;
    goto yy10;
yy14:
    yych = *++YYCURSOR;
    switch (yych) {
    case 0xA0:    goto yy18;
    case 0xA1:    goto yy20;
    case 0xA2:    goto yy22;
    case 0xA3:    goto yy24;
    case 0xA4:    goto yy26;
    case 0xA5:    goto yy28;
    case 0xA6:    goto yy30;
    case 0xA7:    goto yy32;
    case 0xA8:    goto yy34;
    case 0xA9:    goto yy36;
    case 0xAA:    goto yy38;
    case 0xAB:    goto yy40;
    case 0xAC:    goto yy42;
    case 0xAD:    goto yy44;
    case 0xAE:    goto yy46;
    case 0xAF:    goto yy48;
    case 0xB0:    goto yy50;
    case 0xB1:    goto yy52;
    case 0xB2:    goto yy54;
    case 0xB3:    goto yy56;
    case 0xB4:    goto yy58;
    case 0xB5:    goto yy60;
    case 0xB6:    goto yy62;
    case 0xB7:    goto yy64;
    case 0xB8:    goto yy66;
    case 0xB9:    goto yy68;
    case 0xBA:    goto yy70;
    case 0xBB:    goto yy72;
    case 0xBC:    goto yy74;
    case 0xBD:    goto yy76;
    case 0xBE:    goto yy78;
    case 0xBF:    goto yy80;
    default:    goto yy10;
    }
yy15:
    yych = *++YYCURSOR;
    switch (yych) {
    case 0x80:    goto yy82;
    case 0x81:    goto yy84;
    case 0x82:    goto yy86;
    case 0x83:    goto yy88;
    case 0x84:    goto yy90;
    case 0x85:    goto yy92;
    case 0x86:    goto yy94;
    case 0x87:    goto yy96;
    case 0x88:    goto yy98;
    case 0x89:    goto yy100;
    case 0x8A:    goto yy102;
    case 0x8B:    goto yy104;
    case 0x8C:    goto yy106;
    case 0x8D:    goto yy108;
    case 0x8E:    goto yy110;
    case 0x8F:    goto yy112;
    case 0x90:    goto yy114;
    case 0x91:    goto yy116;
    case 0x92:    goto yy118;
    case 0x93:    goto yy120;
    case 0x94:    goto yy122;
    case 0x95:    goto yy124;
    case 0x96:    goto yy126;
    case 0x97:    goto yy128;
    case 0x98:    goto yy130;
    case 0x99:    goto yy132;
    case 0x9A:    goto yy134;
    case 0x9B:    goto yy136;
    case 0x9C:    goto yy138;
    case 0x9D:    goto yy140;
    case 0x9E:    goto yy142;
    case 0x9F:    goto yy144;
    case 0xA0:    goto yy146;
    case 0xA1:    goto yy148;
    case 0xA2:    goto yy150;
    case 0xA3:    goto yy152;
    case 0xA4:    goto yy154;
    case 0xA5:    goto yy156;
    case 0xA6:    goto yy158;
    case 0xA7:    goto yy160;
    case 0xA8:    goto yy162;
    case 0xA9:    goto yy164;
    case 0xAA:    goto yy166;
    case 0xAB:    goto yy168;
    case 0xAC:    goto yy170;
    case 0xAD:    goto yy172;
    case 0xAE:    goto yy174;
    case 0xAF:    goto yy176;
    case 0xB0:    goto yy178;
    case 0xB1:    goto yy180;
    case 0xB2:    goto yy182;
    case 0xB3:    goto yy184;
    case 0xB4:    goto yy186;
    case 0xB5:    goto yy188;
    case 0xB6:    goto yy190;
    case 0xB7:    goto yy192;
    case 0xB8:    goto yy194;
    case 0xB9:    goto yy196;
    case 0xBA:    goto yy198;
    case 0xBB:    goto yy200;
    case 0xBC:    goto yy202;
    case 0xBD:    goto yy204;
    case 0xBE:    goto yy206;
    case 0xBF:    goto yy208;
    default:    goto yy10;
    }
yy16:
    yych = *++YYCURSOR;
    if (yych <= 0x9F) {
        if (yych <= 0x91) goto yy10;
        if (yych <= 0x92) goto yy210;
        if (yych <= 0x93) goto yy212;
        goto yy10;
    } else {
        if (yych <= 0xA1) {
            if (yych <= 0xA0) goto yy214;
            goto yy216;
        } else {
            if (yych == 0xB8) goto yy218;
            goto yy10;
        }
    }
yy17:
    yych = *++YYCURSOR;
    switch (yych) {
    case 0x80:    goto yy220;
    case 0x84:    goto yy221;
    case 0x85:    goto yy222;
    case 0x94:    goto yy223;
    case 0x96:    goto yy224;
    case 0x99:    goto yy225;
    default:    goto yy10;
    }
yy18:
    ++YYCURSOR;
    {
        // NO-BREAK SPACE
        return 0x00a0;
    }
yy20:
    ++YYCURSOR;
    {
        // INVERTED EXCLAMATION MARK
        return 0x00a1;
    }
yy22:
    ++YYCURSOR;
    {
        // CENT SIGN
        return 0x00a2;
    }
yy24:
    ++YYCURSOR;
    {
        // POUND SIGN
        return 0x00a3;
    }
yy26:
    ++YYCURSOR;
    {
        // CURRENCY SIGN
        return 0x00a4;
    }
yy28:
    ++YYCURSOR;
    {
        // YEN SIGN
        return 0x00a5;
    }
yy30:
    ++YYCURSOR;
    {
        // BROKEN BAR
        return 0x00a6;
    }
yy32:
    ++YYCURSOR;
    {
        // SECTION SIGN
        return 0x00a7;
    }
yy34:
    ++YYCURSOR;
    {
        // DIAERESIS
        return 0x00a8;
    }
yy36:
    ++YYCURSOR;
    {
        // COPYRIGHT SIGN
        return 0x00a9;
    }
yy38:
    ++YYCURSOR;
    {
        // FEMININE ORDINAL INDICATOR
        return 0x00aa;
    }
yy40:
    ++YYCURSOR;
    {
        // LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
        return 0x00ab;
    }
yy42:
    ++YYCURSOR;
    {
        // NOT SIGN
        return 0x00ac;
    }
yy44:
    ++YYCURSOR;
    {
        // SOFT HYPHEN
        return 0x00ad;
    }
yy46:
    ++YYCURSOR;
    {
        // REGISTERED SIGN
        return 0x00ae;
    }
yy48:
    ++YYCURSOR;
    {
        // MACRON
        return 0x00af;
    }
yy50:
    ++YYCURSOR;
    {
        // DEGREE SIGN
        return 0x00b0;
    }
yy52:
    ++YYCURSOR;
    {
        // PLUS-MINUS SIGN
        return 0x00b1;
    }
yy54:
    ++YYCURSOR;
    {
        // SUPERSCRIPT TWO
        return 0x00b2;
    }
yy56:
    ++YYCURSOR;
    {
        // SUPERSCRIPT THREE
        return 0x00b3;
    }
yy58:
    ++YYCURSOR;
    {
        // ACUTE ACCENT
        return 0x00b4;
    }
yy60:
    ++YYCURSOR;
    {
        // MICRO SIGN
        return 0x00b5;
    }
yy62:
    ++YYCURSOR;
    {
        // PILCROW SIGN
        return 0x00b6;
    }
yy64:
    ++YYCURSOR;
    {
        // MIDDLE DOT
        return 0x00b7;
    }
yy66:
    ++YYCURSOR;
    {
        // CEDILLA
        return 0x00b8;
    }
yy68:
    ++YYCURSOR;
    {
        // SUPERSCRIPT ONE
        return 0x00b9;
    }
yy70:
    ++YYCURSOR;
    {
        // MASCULINE ORDINAL INDICATOR
        return 0x00ba;
    }
yy72:
    ++YYCURSOR;
    {
        // RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
        return 0x00bb;
    }
yy74:
    ++YYCURSOR;
    {
        // VULGAR FRACTION ONE QUARTER
        return 0x00bc;
    }
yy76:
    ++YYCURSOR;
    {
        // VULGAR FRACTION ONE HALF
        return 0x00bd;
    }
yy78:
    ++YYCURSOR;
    {
        // VULGAR FRACTION THREE QUARTERS
        return 0x00be;
    }
yy80:
    ++YYCURSOR;
    {
        // INVERTED QUESTION MARK
        return 0x00bf;
    }
yy82:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER A WITH GRAVE
        return 0x00c0;
    }
yy84:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER A WITH ACUTE
        return 0x00c1;
    }
yy86:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER A WITH CIRCUMFLEX
        return 0x00c2;
    }
yy88:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER A WITH TILDE
        return 0x00c3;
    }
yy90:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER A WITH DIAERESIS
        return 0x00c4;
    }
yy92:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER A WITH RING ABOVE
        return 0x00c5;
    }
yy94:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER AE
        return 0x00c6;
    }
yy96:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER C WITH CEDILLA
        return 0x00c7;
    }
yy98:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER E WITH GRAVE
        return 0x00c8;
    }
yy100:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER E WITH ACUTE
        return 0x00c9;
    }
yy102:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER E WITH CIRCUMFLEX
        return 0x00ca;
    }
yy104:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER E WITH DIAERESIS
        return 0x00cb;
    }
yy106:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER I WITH GRAVE
        return 0x00cc;
    }
yy108:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER I WITH ACUTE
        return 0x00cd;
    }
yy110:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER I WITH CIRCUMFLEX
        return 0x00ce;
    }
yy112:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER I WITH DIAERESIS
        return 0x00cf;
    }
yy114:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER ETH
        return 0x00d0;
    }
yy116:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER N WITH TILDE
        return 0x00d1;
    }
yy118:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER O WITH GRAVE
        return 0x00d2;
    }
yy120:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER O WITH ACUTE
        return 0x00d3;
    }
yy122:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER O WITH CIRCUMFLEX
        return 0x00d4;
    }
yy124:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER O WITH TILDE
        return 0x00d5;
    }
yy126:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER O WITH DIAERESIS
        return 0x00d6;
    }
yy128:
    ++YYCURSOR;
    {
        // MULTIPLICATION SIGN
        return 0x00d7;
    }
yy130:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER O WITH STROKE
        return 0x00d8;
    }
yy132:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER U WITH GRAVE
        return 0x00d9;
    }
yy134:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER U WITH ACUTE
        return 0x00da;
    }
yy136:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER U WITH CIRCUMFLEX
        return 0x00db;
    }
yy138:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER U WITH DIAERESIS
        return 0x00dc;
    }
yy140:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER Y WITH ACUTE
        return 0x00dd;
    }
yy142:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER THORN
        return 0x00de;
    }
yy144:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER SHARP S
        return 0x00df;
    }
yy146:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER A WITH GRAVE
        return 0x00e0;
    }
yy148:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER A WITH ACUTE
        return 0x00e1;
    }
yy150:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER A WITH CIRCUMFLEX
        return 0x00e2;
    }
yy152:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER A WITH TILDE
        return 0x00e3;
    }
yy154:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER A WITH DIAERESIS
        return 0x00e4;
    }
yy156:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER A WITH RING ABOVE
        return 0x00e5;
    }
yy158:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER AE
        return 0x00e6;
    }
yy160:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER C WITH CEDILLA
        return 0x00e7;
    }
yy162:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER E WITH GRAVE
        return 0x00e8;
    }
yy164:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER E WITH ACUTE
        return 0x00e9;
    }
yy166:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER E WITH CIRCUMFLEX
        return 0x00ea;
    }
yy168:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER E WITH DIAERESIS
        return 0x00eb;
    }
yy170:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER I WITH GRAVE
        return 0x00ec;
    }
yy172:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER I WITH ACUTE
        return 0x00ed;
    }
yy174:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER I WITH CIRCUMFLEX
        return 0x00ee;
    }
yy176:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER I WITH DIAERESIS
        return 0x00ef;
    }
yy178:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER ETH
        return 0x00f0;
    }
yy180:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER N WITH TILDE
        return 0x00f1;
    }
yy182:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER O WITH GRAVE
        return 0x00f2;
    }
yy184:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER O WITH ACUTE
        return 0x00f3;
    }
yy186:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER O WITH CIRCUMFLEX
        return 0x00f4;
    }
yy188:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER O WITH TILDE
        return 0x00f5;
    }
yy190:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER O WITH DIAERESIS
        return 0x00f6;
    }
yy192:
    ++YYCURSOR;
    {
        // DIVISION SIGN
        return 0x00f7;
    }
yy194:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER O WITH STROKE
        return 0x00f8;
    }
yy196:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER U WITH GRAVE
        return 0x00f9;
    }
yy198:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER U WITH ACUTE
        return 0x00fa;
    }
yy200:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER U WITH CIRCUMFLEX
        return 0x00fb;
    }
yy202:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER U WITH DIAERESIS
        return 0x00fc;
    }
yy204:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER Y WITH ACUTE
        return 0x00fd;
    }
yy206:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER THORN
        return 0x00fe;
    }
yy208:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER Y WITH DIAERESIS
        return 0x00ff;
    }
yy210:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LIGATURE OE
        return 0x102c;
    }
yy212:
    ++YYCURSOR;
    {
        // LATIN SMALL LIGATURE OE
        return 0x103c;
    }
yy214:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER S WITH CARON
        return 0x102a;
    }
yy216:
    ++YYCURSOR;
    {
        // LATIN SMALL LETTER S WITH CARON
        return 0x103a;
    }
yy218:
    ++YYCURSOR;
    {
        // LATIN CAPITAL LETTER Y WITH DIAERESIS
        return 0x103f;
    }
yy220:
    yych = *++YYCURSOR;
    if (yych == 0xC2) goto yy226;
    goto yy10;
yy221:
    yych = *++YYCURSOR;
    if (yych == 0xC2) goto yy227;
    goto yy10;
yy222:
    yych = *++YYCURSOR;
    if (yych == 0xC2) goto yy228;
    goto yy10;
yy223:
    yych = *++YYCURSOR;
    if (yych == 0xC2) goto yy229;
    goto yy10;
yy224:
    yych = *++YYCURSOR;
    if (yych == 0xC2) goto yy230;
    goto yy10;
yy225:
    yych = *++YYCURSOR;
    if (yych == 0xC2) goto yy231;
    goto yy10;
yy226:
    yych = *++YYCURSOR;
    switch (yych) {
    case 0x98:    goto yy232;
    case 0x99:    goto yy234;
    case 0x9C:    goto yy236;
    case 0x9D:    goto yy238;
    case 0xA2:    goto yy240;
    case 0xA6:    goto yy242;
    default:    goto yy10;
    }
yy227:
    yych = *++YYCURSOR;
    if (yych == 0xA0) goto yy244;
    if (yych == 0xA2) goto yy246;
    goto yy10;
yy228:
    yych = *++YYCURSOR;
    if (yych <= 0x9C) {
        if (yych <= 0x9A) goto yy10;
        if (yych <= 0x9B) goto yy248;
        goto yy250;
    } else {
        if (yych <= 0x9D) goto yy252;
        if (yych <= 0x9E) goto yy254;
        goto yy10;
    }
yy229:
    yych = *++YYCURSOR;
    switch (yych) {
    case 0x80:    goto yy256;
    case 0x82:    goto yy258;
    case 0x8C:    goto yy260;
    case 0x90:    goto yy262;
    case 0x94:    goto yy264;
    case 0x98:    goto yy266;
    default:    goto yy10;
    }
yy230:
    yych = *++YYCURSOR;
    if (yych == 0x88) goto yy268;
    goto yy10;
yy231:
    yych = *++YYCURSOR;
    if (yych == 0xAA) goto yy270;
    goto yy10;
yy232:
    ++YYCURSOR;
    {
        // LEFT SINGLE QUOTATION MARK
        return 0x1031;
    }
yy234:
    ++YYCURSOR;
    {
        // RIGHT SINGLE QUOTATION MARK
        return 0x1032;
    }
yy236:
    ++YYCURSOR;
    {
        // LEFT DOUBLE QUOTATION MARK
        return 0x1033;
    }
yy238:
    ++YYCURSOR;
    {
        // RIGHT DOUBLE QUOTATION MARK
        return 0x1034;
    }
yy240:
    ++YYCURSOR;
    {
        // BULLET
        return 0x1035;
    }
yy242:
    ++YYCURSOR;
    {
        // HORIZONTAL ELLIPSIS
        return 0x1025;
    }
yy244:
    ++YYCURSOR;
    {
        // SERVICE MARK
        return 0x103d;
    }
yy246:
    ++YYCURSOR;
    {
        // TRADE MARK SIGN
        return 0x1039;
    }
yy248:
    ++YYCURSOR;
    {
        // VULGAR FRACTION ONE EIGHTH
        return 0x1076;
    }
yy250:
    ++YYCURSOR;
    {
        // VULGAR FRACTION THREE EIGHTHS
        return 0x1077;
    }
yy252:
    ++YYCURSOR;
    {
        // VULGAR FRACTION FIVE EIGHTHS
        return 0x1078;
    }
yy254:
    ++YYCURSOR;
    {
        // VULGAR FRACTION SEVEN EIGHTHS
        return 0x1079;
    }
yy256:
    ++YYCURSOR;
    {
        // BOX DRAWINGS LIGHT HORIZONTAL
        return 0x107d;
    }
yy258:
    ++YYCURSOR;
    {
        // BOX DRAWINGS LIGHT VERTICAL
        return 0x107a;
    }
yy260:
    ++YYCURSOR;
    {
        // BOX DRAWINGS LIGHT DOWN AND RIGHT
        return 0x107f;
    }
yy262:
    ++YYCURSOR;
    {
        // BOX DRAWINGS LIGHT DOWN AND LEFT
        return 0x107b;
    }
yy264:
    ++YYCURSOR;
    {
        // BOX DRAWINGS LIGHT UP AND RIGHT
        return 0x107c;
    }
yy266:
    ++YYCURSOR;
    {
        // BOX DRAWINGS LIGHT UP AND LEFT
        return 0x107e;
    }
yy268:
    ++YYCURSOR;
    {
        // FULL BLOCK
        return 0x1030;
    }
yy270:
    ++YYCURSOR;
    {
        // EIGHTH NOTE
        return 0x007f;
    }
}

}
